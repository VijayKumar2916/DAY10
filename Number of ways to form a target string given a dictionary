You are given a list of strings of the same length words and a string target.

# Your task is to form target using the given words under the following rules:

# target should be formed from left to right.
# To form the ith character (0-indexed) of target, you can choose the kth character of the jth string in words if target[i] = words[j][k].
# Once you use the kth character of the jth string of words, you can no longer use the xth character of any string in words where x <= k. In other words, all characters to the left of or at index k become unusuable for every string.
# Repeat the process until you form the string target.
# Notice that you can use multiple characters from the same string in words provided the conditions above are met.

# Return the number of ways to form target from words. Since the answer may be too large, return it modulo 109 + 7.

 

# Example 1:

# Input: words = ["acca","bbbb","caca"], target = "aba"
# Output: 6
# Explanation: There are 6 ways to form target.
# "aba" -> index 0 ("acca"), index 1 ("bbbb"), index 3 ("caca")
# "aba" -> index 0 ("acca"), index 2 ("bbbb"), index 3 ("caca")
# "aba" -> index 0 ("acca"), index 1 ("bbbb"), index 3 ("acca")
# "aba" -> index 0 ("acca"), index 2 ("bbbb"), index 3 ("acca")
# "aba" -> index 1 ("caca"), index 2 ("bbbb"), index 3 ("acca")
# "aba" -> index 1 ("caca"), index 2 ("bbbb"), index 3 ("caca")
# Example 2:

# Input: words = ["abba","baab"], target = "bab"
# Output: 4
# Explanation: There are 4 ways to form target.
# "bab" -> index 0 ("baab"), index 1 ("baab"), index 2 ("abba")
# "bab" -> index 0 ("baab"), index 1 ("baab"), index 3 ("baab")
# "bab" -> index 0 ("baab"), index 2 ("baab"), index 3 ("baab")
# "bab" -> index 1 ("abba"), index 2 ("baab"), index 3 ("baab")

class Solution(object):
    def numWays(self, words, target):
        self.len_w = len(words[0])
        self.len_t = len(target)
        self.cmap_list = []
        for idx in range(self.len_w):
            cdict = collections.defaultdict(int)
            for w in words:
                cdict[w[idx]] += 1
            self.cmap_list.append(cdict)

        self.target = target
        self.dp = collections.defaultdict(lambda: None)
        ans = 0
        for i in range(self.len_w):
            ans += self.findWays(i, 0)
        return ans % 1000000007
        
    def findWays(self, c_idx, target_idx):
        if self.len_w - c_idx < self.len_t - target_idx:
            return 0

        if self.dp[c_idx, target_idx] is None:
            cnt = self.cmap_list[c_idx][self.target[target_idx]]
            if cnt > 0 and target_idx < self.len_t - 1:
                rest_ways = 0
                for i in range(c_idx + 1, self.len_w + 1):
                    rest_ways += self.findWays(i, target_idx + 1)
                cnt = (cnt * rest_ways) % 1000000007
            self.dp[c_idx, target_idx] = cnt
        return self.dp[c_idx, target_idx]
            
        """
        :type words: List[str]
        :type target: str
        :rtype: int
        """
        
